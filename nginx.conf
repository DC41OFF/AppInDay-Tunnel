user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    load_module /usr/lib/nginx/modules/ngx_http_lua_module.so;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    lua_package_path "/usr/local/lib/lua/5.1/?.lua;;";
    sendfile on;
    keepalive_timeout 65;
    gzip  on;

    server {
        listen 80 default_server;
        listen [::]:80 default_server;

        server_name _;
        charset utf-8;
        root html;

        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
        }

        location ~* "^/([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})-(vm|vl|tr)$" {
            access_by_lua_block {
                local http = require("socket.http")
                local cjson = require "cjson"
                local response_body = {}
                local url = aid .. "/?uuid=" .. ngx.var.1

                local res, code, response_headers = http.request {
                    url = url,
                    method = "GET",
                    sink = ltn12.sink.table(response_body)
                }

                if code == 200 then
                    local response_str = table.concat(response_body)
                    local response = cjson.decode(response_str)
                    ngx.var.revproxy = response.url .. ngx.var.1 .. "-" .. ngx.var.2
                else
                    print("HTTP request failed with code " .. code)
                end
            }

            proxy_pass $revproxy;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection upgrade;
            proxy_set_header Host $http_host;
        }
    }
}